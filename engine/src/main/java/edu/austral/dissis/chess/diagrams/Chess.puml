@startuml
class ChessGame{
-board: Board
-rules: List<GameRule>
-winConditionValidator :WinConditionValidator
-winConditions : List<WinCondition>
-checkConditions : List<Check>
-promoter : Promoter
-selector : TurnSelector
-currentTurn : Color
-turnNumber : int
-executor : MoveExecutor
+makeMove(ChessMove move): GameResult
+getWinConditions() : List<WinCondition>
+getBoard(): Board
+getCurrentTurn(): Color
+getPromoter(): Promoter
+getSelector(): TurnSelector
+getCheckConditions(): List<Check>
+getTurnNumber(): int
}

class Board {
-pieces: Map<ChessPosition, Piece>
-rows: int
-columns: int
+getActivePiecesAndPositions(): Map<ChessPosition, Piece>
+getRows(): int
+getColumns(): int
+removePieceAt(ChessPosition pos): Board
+addPieceToGame(ChessPosition pos, Piece piece): Board
+updatePiecePosition(ChessPosition oldPos, ChessPosition newPos): Board
}

interface WinCondition{
+isValidRule(Board context): boolean
}
class CheckMate implements WinCondition{
-team: Color
}
class DefaultCheck implements Check{
-team: Color
}

interface Check extends WinCondition{
}

class Piece{
-movements: List<PieceMovement>
-pieceColour: Color
-type: PieceType
-hasMoved : boolean
-id : String

+toString(): String
+getPieceColour(): Color
+getType(): PieceType
+getMovements(): List<PieceMovement>
+getId(): String
+hasMoved(): boolean


+isValidMove(ChessPosition oldPos, ChessPosition newPos, Board context): boolean
+getMoveSet(ChessPosition currentPos, Board context): List<ChessPosition>
+getPlay(ChessPosition oldPos, ChessPosition newPos ,Board context): List<ChessMove>
+changeMoveState(): Piece
}

enum PieceType{
PAWN,
ROOK,
KNIGHT,
QUEEN,
KING,
BISHOP
}

interface PieceMovement{
+isValidMove(ChessPosition oldPos, ChessPosition newPos, Board context): boolean
+getPossiblePositions(ChessPosition currentPos, Board context):List<ChessPosition>
}
class Castling implements PieceMovement{
}
class DiagonalMovement implements PieceMovement{
}
class HorizontalMovement implements PieceMovement{
}
class KingMovement implements PieceMovement{
}
class KnightMovement implements PieceMovement{
}
class PawnFirstMove implements PieceMovement{
}
class PawnMovement implements PieceMovement{
}
class PawnTaking implements PieceMovement{
}
class QueenMovement implements PieceMovement{
}
class RookMovement implements PieceMovement{
}
class VerticalMovement implements PieceMovement{
}

interface Promoter{
+hasToPromote(Board context, Color team): boolean
+canPromote(ChessPosition pos, Board context): boolean
+promote(ChessPosition pos, PieceType type, Board context): Board
}
class StandardPromoter implements Promoter{
}

interface TurnSelector{
+selectTurn(int turnNumber): Color
}
class StandardTurnSelector implements TurnSelector{
}
class MoveExecutor{
+executeMove(ChessPosition oldPos, ChessPosition newPos, Board board, Promoter promoter): Pair<Board,ChessMoveResult>
}


' Utils
class ChessPosition{
-int row
-int column
+getRow(): int
+getColumn(): int
+toString(): String
+equals(Object obj): boolean
+hashCode(): int
+<u>toAlgebraic(ChessPosition pos): String
+<u>fromAlgebraic(String pos): ChessPosition
}
class ChessMove{
'Note that it's a record
-from: ChessPosition
-to: ChessPosition
+from(): ChessPosition
+to(): ChessPosition
+toString(): String
}
enum ChessMoveResult{
WHITE_WIN,
BLACK_WIN,
INVALID_MOVE,
VALID_MOVE,
PIECE_TAKEN
}
class GameResult{
-game: ChessGame
-moveResult: ChessMoveResult
+game(): ChessGame
+moveResult(): ChessMoveResult
}
enum GameType{
DEFAULT
}
enum MoveType{
HORIZONTAL,
VERTICAL,
DIAGONAL
}
class Pair{
-first: T
-second: W
+first(): T
+second(): W
}

'Validators
class DefaultCheckValidator{
+isInCheck(Board context, Color team, ChessPosition toPos, Piece piece): boolean
}
class PiecePathValidator{
+isNoPieceBetween(ChessPosition from, ChessPosition to, Board context, MoveType moveType): boolean
}
class WinConditionValidator{
-winConditions:  List<WinCondition>
+isGameWon(Board context): boolean
}


'Relations
ChessGame o--- Board
ChessGame o--- Promoter
ChessGame o---- TurnSelector
ChessGame o--- WinCondition
ChessGame o--- Check
ChessGame o---- MoveExecutor
ChessGame ---> WinConditionValidator
ChessGame -> ChessMove
MoveExecutor --> ChessMoveResult
ChessGame -> GameResult

Board *-- Piece
Board *-- ChessPosition

ChessMove *-- ChessPosition
PieceMovement -> PiecePathValidator
DefaultCheck -> DefaultCheckValidator
MoveExecutor --> MoveType
MoveExecutor --> Pair
Piece o-- PieceType
Piece o--- PieceMovement
@enduml